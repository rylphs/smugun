<?php
// This file is generated by Composer
require_once 'vendor/autoload.php';

 function notImplemented(){
        $trace = debug_backtrace();
        $caller = $trace[1];
        $m = "";
        if(isset($caller['class'])) $m = $caller['class'] . "::";
        $m = $m . $caller['function'];
        throw new Exception("$m not implemented yet!");
 }

class Logger{
    const LOG = "main.log";
    const UPLOAD_ERRORS = "upload-errors.log";
    const PROCESSED = "processed.log";
    const SKIP = "skip.log";
    const TIME_FORMAT = "Y-m-d:H:i:s";

    private $level = 0;
    private $logLocation;
    private $startTime;

    public function __construct(){
        if(func_num_args() > 0){
            $this->logLocation = rtrim(func_get_arg(0), '/') . "/";
        }
        else $this->logLocation = "./";
        $this->startTime = $this->getTime("Y-m-d_H-i-s_");
    }

    private function getLogname($baseName){
        return $this->logLocation . $this->startTime . $baseName;
    }

    private function getTime($format){
        $date = new DateTime(null, new DateTimeZone('America/Sao_Paulo'));
        return $date->format($format);
    }

    private function writeLog($txt){
        $txt = str_repeat("   ", $this->level).$txt . "\n";
        file_put_contents($this->getLogname(self::LOG), $this->getTime(self::TIME_FORMAT) . " $txt", FILE_APPEND);
    }

    private function decreaseLevel(){
        $this->level = max(0, ($this->level - 1));
    }

    public function info($txt){
        $this->writeLog("INFO: $txt");
        $this->level++;
    }

    public function error($txt){
         $this->decreaseLevel();
        $this->writeLog("ERROR: $txt");
    }

    public function infoOk(){
        $this->decreaseLevel();
        if(func_num_args() == 0) return;
        $txt = func_get_arg(0);
        $this->writeLog("INFO: $txt");
    }

    public function infoProcessed($file){
        $this->info("Processing file $file...");
        file_put_contents($this->getLogName(self::PROCESSED), "$file\n", FILE_APPEND);
    }

    public function infoSkip($file){
        $this->infoOk("File $file has not changed and will be skiped.");
        file_put_contents($this->getLogName(self::SKIP), "$file\n", FILE_APPEND);
    }

    public function errorUpload($file){
        $this->error("Error during file upload($file), file will be skiped.");
        file_put_contents($this->getLogName(self::UPLOAD_ERRORS), "$file\n", FILE_APPEND);
    }
}

class SmugClient{
    const TOKEN = "gnXh7ZH5X77tSVkqgKXXfpkj9xpmXm6T";
    CONST TOKEN_SEC = "BWPJTxNQDt9DdKJ9FWzGx4Bk3NZc9GjMQBVBMz247j8d88xpJG2QkPQ5VDk835JT";
    const APP_NAME = 'myApp';
    const VERBOSITY = 1;
    const OAUTH_SEC = 'bpvQdjcxgtrQQGGzjv6hCn8qJR6vCRV56rHH37Dm4dvkX9cqzLZqGhfPw2bH9f7B';
    const ACCESS = 'Full';
    const PERMISSION = 'Modify';
    const API_KEY = 'N98SRGkT8sgWBnstKwCPX7nj2Rwhd6K6';
    const FOLDER_URI = "folder/user/rapha/Uploads";
    const FOLDER_TYPE = 2;

    private $client = null;

    public function connect(){
        $options = [ 'AppName' => self::APP_NAME, 
            '_verbosity' => self::VERBOSITY, 
            'OAuthSecret' => self::OAUTH_SEC
        ];
        $this->client = new phpSmug\Client(self::API_KEY, $options);
        $this->setToken();
    }

    public function createFolder($path){
        $path = $this->separeNodeFromPath($path);
        print_r($this->toUriPath($path['path']));

        $nodeId = $this->getNodeId($this->toUriPath($path['path']));
        $uri = "node/$nodeId!children";
        
        $this->client->post($uri, [
            "Type" => self::FOLDER_TYPE,
            "Name" => $path['node'],
            "UrlName" => ucfirst($path['node'])
        ]);
    }

    public function folderExists($path){
        $uri = self::FOLDER_URI . "/".$this->toUriPath($path);
        try{
            $this->client->get($uri);
            return true;
        }
        catch(Exception $e){
            return false;
        }
    }

    private function separeNodeFromPath($path){
        $path = trim($path, "/");
        $exploded = explode("/", $path);
        return [
            'path' => implode("/", array_slice($exploded, 0, count($exploded)-1)),
            'node' => $exploded[count($exploded) - 1]
        ];
    }

    private function getNodeId($path){
        $path = $this->toUriPath($path);
        if($path != "") $path = "/$path";
        $folderInfo = $this->client->get(self::FOLDER_URI . $path);
        return $folderInfo->Folder->NodeID;
    }

    private function setToken(){
        $authtoken = array(
            "oauth_token" => self::TOKEN,
            "oauth_token_secret" => self::TOKEN_SEC
        );
        $this->client->setToken($authtoken['oauth_token'], $authtoken['oauth_token_secret']);
    }

    private function toUriPath($path){
        $path = trim($path, "/");
        $path = explode("/", $path);
        $path = array_map(function($value){
            return ucfirst($value);
        }, $path);
        return implode("/", $path);
    }

    

/*    private $client = null;
    private $uploadFolderInfo = null;
    private $fileInfo = [];

    private function splitPath($path){
        $path = trim($path, "/");
        $exploded = explode("/", $path);
        return [
            'path' => implode("/", array_slice($exploded, 0, count($exploded)-1)),
            'object' => $exploded[count($exploded) - 1]
        ];
    }

    private function getNodeId($path){
        $folderInfo = $this->get("user/rapha/folder/Uploads/" . $path);
        return $folderInfo->Folder->NodeID;
    }

    private function setToken(){
        $authtoken = array(
            "oauth_token" => self::TOKEN,
            "oauth_token_secret" => self::TOKEN_SEC
        );
        $this->client->setToken($authtoken['oauth_token'], $authtoken['oauth_token_secret']);
    }

    private function getFolderUploads($force){
        if($this->uploadFolderInfo == null || $force){
            $this->uploadFolderInfo = $this->client->get("folder/user/rapha/Uploads!albums");
        }
        return $this->uploadFolderInfo;
    }

    private function getAlbumInfo($name){
        $uploadsInfo = $this->getFolderUploads(false);
        if(!isset($uploadsInfo->Album) || count($uploadsInfo->Album) == 0){
            return false;
        } 
            
        $albums = $uploadsInfo->Album;
        foreach($albums as $album){
            if($album->Name == ucfirst($name)) return $album;
        }
        return null;
    }

    private function getImageInfo($album) {
        if(!array_key_exists($album, $this->fileInfo) || 
            $this->fileInfo[$album] == null){
            $albumKey = $this->getAlbumInfo($album)->AlbumKey;
            $this->fileInfo[$album] = $this->client->get("album/$albumKey!images");
        }
        return $this->fileInfo[$album];
    }

    public function connect(){
        $options = [ 'AppName' => self::APP_NAME, 
            '_verbosity' => self::VERBOSITY, 
            'OAuthSecret' => self::OAUTH_SEC
        ];
        $this->client = new phpSmug\Client(self::API_KEY, $options);
        $this->setToken();
    }

    public function getMd5Sums($path, $imageName){
        $path = $this->splitPath($path);
        
        $imageInfo = $this->getImageInfo($album);
        if(!array_key_exists("AlbumImage", $imageInfo)) return null;
        foreach($imageInfo->AlbumImage as $info){
            if($info->FileName == $imageName) return $info->ArchivedMD5;
        }
        return null;
    }

    public function albumExists($path){
        try{
            $path = $this->splitPath($path);
            $albumInfo = $this->client->get("folder/user/rapha/Uploads/".$path->path."!albums");
            if(!isset($albumInfo->Album) || count($albumInfo->Album)){
                return false;
            }
            foreach($albumInfo->Album as $album){
                if($album->Nome == $path->object) return true;
            }
            return false;
        }catch(Exception $e){
            if($e->getResponse()->getStatusCode() == 404){
                return false;
            }
        }
    }

    public function createNode($path, $type, $tags){
        $path = $this->splitPath($path);
        $nodeId = $this->getNodeId($path->path);
        $urlCreate = 'node/$nodeId!children';
        $albumOptions = [
            "Name" => ucfirst($name),
            "Type" => $type,
            "Keywords" => $tags,
            "Privacy" => 3,
            "UrlName" => ucfirst($name),
            "Watermark" => false,
        ];
        try{
            $this->client->post($urlCreate, $albumOptions);
            $uploads = $this->getFolderUploads(true);
        }catch(Exception $e){
            print($e->getResponse()->getBody(true));
        }
    }

    public function upload($file, $album, $tags){
        $albumKey = $this->getAlbumInfo($album)->AlbumKey;
        $this->client->upload("album/$albumKey", $file, [
            'FileName' => $file,
            'Keywords' => $tags
        ]);
    }*/
}

class Uploader {
    const MEDIA_PATTERN = "{jpg,JPG,png,PNG}";

    private $smugClient;
    private $numberOfFilesProcessed = 0;
    private $numberOfFilesUploaded = 0;
    private $numberOfFilesSkiped = 0;
    private $numberOfFilesWithError = 0;
    private $numberOfTotalFiles = 0;
    private $logger;
    private $dir;

    public function __construct($folder){
        $this->dir = $folder;
        $this->smugClient = new SmugClient();
        $this->logger = new Logger($folder);
    }

    private function connect() {
        try{
            $this->logger->info("Connecting to smugmug...");
            $this->smugClient->connect();
            $this->logger->infoOk("Connected");
        }catch(Exception $e){
            $this->logger->error("Conection error " . $e->getMessage());
            throw($e);
        }
   }

   private function countFiles($folder){
       $subs = glob($folder . '/*' , GLOB_ONLYDIR);
       foreach($subs as $subDir){
           $this->countFiles($subDir);
       }
       $files = glob("$folder/*.". self::MEDIA_PATTERN, GLOB_BRACE);
       $this->numberOfTotalFiles += count($files);
   }

  /*  private function getFolderName($path){
        return basename($path);
    }

    private function getTags($path){
        $tags = explode('/', $path);
        $filter = function($value) {
            if($value == '.' || $value == "") return false;
            return true;
        };
        $tags = array_filter($tags, $filter);
        $tags = array_slice($tags, 1);
        return implode(",", $tags);
    }

    private function createAlbumIfNotExists($path, $tags){
        $albumName = $this->getFolderName($path);
        $this->logger->info("Searching for $albumName album...");
        if($this->smugClient->albumExists($path)){
            $this->logger->infoOk("Album already exists");
        }
        else{
            $this->logger->info("Album not found, creating it...");
            $this->smugClient->createAlbum($path, $tags);
            $this->logger->infoOk("OK");
        }
    }

    private function getFolders($parent){
        $this->logger->info("Getting subdirectories from $parent...");
        $dirs = glob($parent . '/*' , GLOB_ONLYDIR);
        $this->logger->infoOk();
        return $dirs;
    }
    
    private function getPhotos($dir){
        $this->logger->info("Searching for media in $dir directory ...");
        $this->logger->infoOk();
        return glob("$dir/*.". self::MEDIA_PATTERN, GLOB_BRACE);
    }


    private function sendFiles($path){
        $albumName = $this->getFolderName($path);
        $files = $this->getPhotos($path);
        $tags = $this->getTags($path);
        if(count($files)== 0){
            $this->logger->infoOk("Directory $path has no media files, nothing to do here!");
            return;
        }

        $this->createAlbumIfNotExists($path, $tags);
        foreach($files as $file){
            $this->logger->infoProcessed($file);
            $this->numberOfFilesProcessed++;
            $md5 = $this->smugClient->getMd5Sums($albumName, $this->getFolderName($file));
            if($md5 != null && md5_file($file) == $md5){
                $this->logger->infoSkip($file);
                $this->numberOfFilesSkiped++;
                continue;
            }
            
            $this->logger->info("Uploading $file...");
            try{
                $this->smugClient->upload($file, $albumName, $tags);
                $this->numberOfFilesUploaded++;
                $this->logger->infoOk();
            }catch(Exception $e){
                $this->numberOfFilesWithError++;
                $this->logger->errorUpload($file);
            }
        }
    }

    private function processDir($path) {
        $this->logger->info("Processing folder $path...");
        $subFolders = $this->getFolders($path);

        if(count($subFolders) > 0){
            $this->logger->info("Checking if folder exists");

            if($this->smugClient->folderExists($path)){
                $this->logger->infoOk("Folder already exists");
            }
            else{
                $this->logger->infoOk("Folder not exists, creating it...");
            }
            $this->logger->info("Processing $path children...");
        }

        foreach($subFolders as $child){
            $this->processDir($child);
        }

        $this->sendFiles($path);
        $this->logger->infoOk();
    }*/

    private function getSubfolders($path){
        $this->logger->info("Getting subdirectories from $path...");
        $folders = glob($path . '/*' , GLOB_ONLYDIR);
        $this->logger->infoOk();
        return $folders;
    }

    private function folderExists($path){
        return $this->smugClient->folderExists($path);
    }

    private function createFolder($path){
        $this->smugClient->createFolder($path);
    }

    private function processFiles($path){
       // notImplemented();
    }

    private function processFolder($path){
        $this->logger->info("Processing folder $path...");
        $subFolders = $this->getSubfolders($path);

        if(count($subFolders) > 0){
            $this->logger->info("Checking if folder exists");

            if($this->folderExists($path)){
                $this->logger->infoOk("Folder already exists");
            }
            else{
                $this->logger->infoOk("Folder not exists, creating it...");
                $this->createFolder($path);
            }
            $this->logger->info("Processing $path children...");

            foreach($subFolders as $child){
                $this->processFolder($child);
            }
        }

        $this->processFiles($path);
        $this->logger->infoOk();
    }

    public function startProcessing(){
        $dir = $this->dir;
        $this->countFiles($dir);
        $this->logger->info("Start processing $dir.");
        $this->connect();
        $this->processFolder($dir);
        $this->logger->infoOk();
        $this->logger->infoOk("Total files: " . $this->numberOfTotalFiles);
        $this->logger->infoOk("Total files processed: " . $this->numberOfFilesProcessed);
        $this->logger->infoOk("Total files uploaded: " . $this->numberOfFilesUploaded);
        $this->logger->infoOk("Total files skiped: " . $this->numberOfFilesSkiped);
        $this->logger->infoOk("Total errors when uploading: " . $this->numberOfFilesWithError);
        $this->logger->infoOk("End processing.");
    }
   
}

/*try{
   $dir = rtrim($argv[1], "/");
   echo "Starting script at $dir ...\n";
   $uploader = new Uploader($dir);
   $uploader->startProcessing();
   echo "Success!\n";
}catch(Exception $e){
    echo "An error has ocurred. Check the main.log file.\n";
}*/
